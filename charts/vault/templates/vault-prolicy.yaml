{{/*kast - Kubernetes arcane spelling technology
Copyright (C) 2023 namenmalkv@gmail.com
Licensed under the GNU GPL v3. See LICENSE file for details.

## TODO el selector esta hardcoded lo q evita multiples vaults
 */}}

{{- define "vault.prolicy" -}}
{{- $root := index . 0 -}}
{{- $glyph := index . 1 }}
{{- $vaultServer := get (include "runicIndexer.runicIndexer" (list $root.Values.lexicon (dict "selector" (dict "secret-manager" "vault")) "secret-manager" $root.Values.chapter.name ) | fromJson) "results" }}
{{- range $vaultConf := $vaultServer }}
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: Policy
metadata:
  name:  {{ default ( include "common.name" $root ) $glyph.name }}
  namespace: {{ default "vault" $vaultConf.namespace }}
spec:
{{- include "vault.connect" (list $root $vaultConf  "True")  |nindent 2}}
  policy: |
    path "secrets/data/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/{{ default $root.Release.Namespace $glyph.nameOverride  }}/*" {
      capabilities = [ "create", "read", "update", "delete", "list"]
    }
    path "secrets/metadata/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/{{ default $root.Release.Namespace $glyph.nameOverride  }}/*" {
      capabilities = [ "create", "read", "update", "delete", "list"]
    }
    path "secrets/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/{{ default $root.Release.Namespace $glyph.nameOverride  }}/*" {
      capabilities = [ "create", "read", "update", "delete", "list"]
    }
    path "secrets/metadata/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/data/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/{{ $root.Values.spellbook.name }}/{{ $root.Values.chapter.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/data/{{ $root.Values.spellbook.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/metadata/{{ $root.Values.spellbook.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/{{ $root.Values.spellbook.name }}/public/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/data/{{ $root.Values.spellbook.name }}/pipelines/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/metadata/{{ $root.Values.spellbook.name }}/pipelines/*" {
      capabilities = [ "read", "list"]
    }
    path "secrets/{{ $root.Values.spellbook.name }}/pipelines/*" {
      capabilities = [ "read", "list"]
    }
    path "sys/policies/password/simple-password-policy/*" {
      capabilities = [ "read","list"]
    }
    {{- if ($root.Values.spellbook.prolicy).extraPolicy }}
    {{- range $root.Values.spellbook.prolicy.extraPolicy }}
    path "{{ $vaultConf.path }}" {
      capabilities = {{ $vaultConf.capabilities | toJson }}
    }
    {{- end }}
    {{- end }}
    {{- if ($root.Values.chapter.prolicy).extraPolicy }}
    {{- range $root.Values.chapter.prolicy.extraPolicy }}
    path "{{ $vaultConf.path }}" {
      capabilities = {{ $vaultConf.capabilities | toJson }}
    }
    {{- end }}
    {{- end }}
    {{- if $vaultConf.extraPolicy }}
    {{- range $vaultConf.extraPolicy }}
    path "{{ $vaultConf.path }}" {
      capabilities = {{ $vaultConf.capabilities | toJson }}
    }
    {{- end }}
    {{- end }}
    {{- if $glyph.extraPolicy }}
    {{- range $glyph.extraPolicy }}
    path "{{ $glyph.path }}" {
      capabilities = {{ $glyph.capabilities | toJson }}
    }
    {{- end }}
    {{- end }}
##TODO hay un posible corner case de q cuando se use como summon y se le defina un glyph extra para otra prolicy y las dos tengan prolicys custom pueden escalar permisos en el segundo prolicy
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: KubernetesAuthEngineRole #role
metadata:
  name: {{ include "common.name" $root }}
  namespace: {{ default "vault" .namespace }}
spec:
  {{ include "vault.connect" (list $root $vaultConf  "True") |nindent 2 }}
  path: {{ default $root.Values.spellbook.name $vaultConf.path }}
  policies:
    -  {{ include "common.name" $root }}
  targetServiceAccounts:
    -  {{  default (include "common.name" $root) $glyph.serviceAccount }}
  targetNamespaces:
    targetNamespaces:
      - {{ $root.Release.Namespace }}
{{- end }}
{{- end }}