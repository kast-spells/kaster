{{/*kast - Kubernetes arcane spelling technology
Copyright (C) 2023 namenmalkv@gmail.com
Licensed under the GNU GPL v3. See LICENSE file for details.

## TODO Esto esta desactualizado
lugares de donde puede venir un secret:
podConfigData.secrets
secret.type == secret este es un secret custom lo q require full definition
algo de pullsecrets este puede ser local chapter or spellbook
generacion para alguna runa (mysql mongo etc) para esto podemos hacer un for adicional buscando toda una serie de temlates y q cada uno venga y se hookee medio a manopla
if type=mysql
$secretPath=pathdesde public
$secretFormat=yaml
append to secrets
def generateSecretList
  if $podConfigData.secrets:
    $secrets=append $secrets $secret
  if $secrets:
    for $secret in $secrets:
      if $secret.type=="secret":
        $secrets=append $secrets $secret
      if $secret.type=="mysql":
        $secrets=append $secrets $secret
        $path:
      if $secret.type=="mongo":
        $secrets=append $secrets $secret
        $path:
  if $pullSecrets:
    for $pullSecret in $pullSecrets:
      if $pullSecret.type=="secret":
        $secrets=append $secrets $pullSecret
        #tener en cuenta q es el tipo de secrets con annotations y blas
  return json.loads($secrets)

path: # puede ser absoluto o relativo si es relativo es desde el public del chapter
path: $chapterName/publics/$secretName
path: $secretName
path: /$book/publics/$secretName

spelbook:
  name: sarasa
chapter:
  name: intro
name: summonName

#cuando path es chapter el path es /$spellbook/$chapter/publics/$secretName
#cuando path es book es /$spellbook/publics/$secretName
#cuando path es absolute es /$path
#cuando path es summon es /$spellbook/$chapter/$summonName/publics/$secretName
path: chapter # or spellbook or absolute "/algo/aca" (always starts with /) or summon si path no esta definido usa el publics del micro 

name: secretName
format: env # yaml json b64
b64: false
path: summon
keys:
  - SECRET
  - OTRO

*/}}

{{- define "vault.secret" -}}
{{- $root := index . 0 -}}
{{- $secretName := index . 1 }}
{{- $secret := index . 2 }}
{{- $vaultServer := get (include "runicIndexer.runicIndexer" (list $root.Values.lexicon (dict "selector" (dict "secret-manager" "vault")) "secret-manager" $root.Values.chapter.name ) | fromJson) "results" }}
{{- range $vaultConf := $vaultServer }}
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: VaultSecret
metadata:
  name: {{ $secretName }}
spec:
  vaultSecretDefinitions:
    - name: secret
      requestType: GET
      path: {{ include "generateSecretPath" ( list $root $secretName $secret ) }}
      {{- include "vault.connect" (list $root $vaultConf  "") | nindent 6 }}
  output:
    name: {{ default $secretName $secret.name }}
    stringData:
    {{- $format := default "yaml" $secret.source.format }}
    {{- if eq $secret.type "env" }} #tiene q haber una forma de hacer q esto funcione con un range del lado del operator para q no hagan falta las keys
      {{- range $key := $secret.source.keys }}
        {{ upper $key | replace "-" "_" }}: '{{ default (printf `{{ .secret.%s }}` $key ) }}'
      {{- end }}
      {{-  if hasKey $secret.source "randomKey" }}
        {{- $secretStatics := dict }}
      {{ upper $secret.source.randomKey| replace "-" "_" }}: '{{ default (printf `{{ .secret.%s }}` $secret.source.randomKey ) }}'
        {{- range $key, $value := $secret.source.staticKeys }}
      {{ upper $key | replace "-" "_" }}: '{{  $value }}'
        {{- end }}
      {{- end }}
    {{- else if eq $format "json" }}
      {{ default $secretName $secret.key }}: '{{ `{{ .secret | toJson  }}` }}'
    {{- else if eq $format "b64" }}
      {{ default $secretName $secret.key }}: '{{ `{{ .secret.b64 }}` }}'
    {{- else if eq $format "yaml" }}
      {{ default $secretName $secret.key }}: '{{ `{{ .secret | toYaml  }}` }}'
     {{- else if eq $format "plain" }}
      {{- range $key := $secret.source.keys }}
        {{ $key  }}: '{{ default (printf `{{ .secret.%s }}` $key ) }}'
      {{- end }}
      {{-  if hasKey $secret.source "randomKey" }}
        {{- $secretStatics := dict }}
      {{  $secret.source.randomKey }}: '{{ default (printf `{{ .secret.%s }}` $secret.source.randomKey ) }}'
        {{- range $key, $value := $secret.source.staticKeys }}
      {{  $key  }}: '{{  $value }}'
        {{- end }}
      {{- end }}
    {{- end }}
    type: Opaque
  refreshPeriod: {{ default "3m0s" $secret.source.refreshPeriod }}
{{- end }}
{{- end }}