{{/*kast - Kubernetes arcane spelling technology
Copyright (C) 2023 namenmalkv@gmail.com
Licensed under the GNU GPL v3. See LICENSE file for details.
*/}}
{{- define "gcp.vm" }}
{{- $root := index . 0 -}}
{{- $glyphDefinition := index . 1}}
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeInstance
metadata:
  labels:
    {{- include "common.infra.labels" $root | nindent 4}}
  name: {{ $glyphDefinition.name }}
  annotations:
    {{- include "common.infra.annotations" $root | nindent 4}}
spec:
  machineType: {{ default "e2-micro" $glyphDefinition.machineType }}
  zone: {{ $glyphDefinition.zone }}
  canIpForward: {{ default false $glyphDefinition.canIpForward }}
  description: {{ default $glyphDefinition.name $glyphDefinition.description }}
  {{- if $glyphDefinition.hostname }}
  hostname: {{ $glyphDefinition.hostname }}
  {{- end }}
  metadataStartupScript: {{ $glyphDefinition.script }}
  bootDisk:
    autoDelete: {{ default "false" $glyphDefinition.autoDelete }}
    initializeParams:
      size: {{ default 10 $glyphDefinition.diskSize }}
      type: {{ default "pd-ssd" $glyphDefinition.diskType }}
      sourceImageRef:
        external: {{ default "debian-cloud/debian-12" $glyphDefinition.image }}
  networkInterface:
    - accessConfig:
        - networkTier: {{ default "STANDARD" $glyphDefinition.netTier }}
          natIpRef:
            name: {{ $glyphDefinition.natIpRef }}
            {{- if $glyphDefinition.natIpRefNamespace }}
            namespace: {{ $glyphDefinition.natIpRefNamespace }}
            {{- end }}
      stackType: IPV4_ONLY
      subnetworkRef:
        name: {{ $glyphDefinition.subnetworkRef }}
        {{- if $glyphDefinition.subnetworkRefNamespace }}
        namespace: {{ $glyphDefinition.subnetworkRefNamespace }}
        {{- end }}
  scheduling:
    automaticRestart: true
  tags:
  {{ range $glyphDefinition.tags }}
    - {{ . }}
  {{- end }}
{{- end }}
{{/*

    # apt-get update
    # apt-get install -y wireguard wireguard-tools fish fail2ban iptables
    # if id "devops" &>/dev/null; then
    #     echo "the user already exists."
    # else
    #     useradd -m -s /usr/bin/fish "devops"
    #     mkdir -p /home/devops/.ssh
    #     ## TODO THIS MUST BE A SECRET
    #     echo "devops ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers
    #     echo "ssh-ed25519 KEY" > /home/devops/.ssh/authorized_keys
    #     chown -r devops:devops /home/devops/.ssh 
    # fi

    # WG_INTERFACE="wg0"
    # SERVER_PRIV_KEY_FILE="/etc/wireguard/server_private.key"
    # SERVER_PUB_KEY_FILE="/etc/wireguard/server_public.key"
    # SERVER_PORT=51820
    # SERVER_IP="192.168.72.1/24"
    # PEER_IP="192.168.72.2/32"
    # WG_CONF="/etc/wireguard/$WG_INTERFACE.conf"
    # PEER_CONF="/etc/wireguard/peer.conf"
    # ACCESS_CIDRS=("10.12.0.0/16" "10.14.0.0/16")

    # apt update && apt install -y wireguard

    # umask 077
    # wg genkey | tee "$SERVER_PRIV_KEY_FILE" | wg pubkey > "$SERVER_PUB_KEY_FILE"
    # SERVER_PRIV_KEY=$(cat "$SERVER_PRIV_KEY_FILE")
    # SERVER_PUB_KEY=$(cat "$SERVER_PUB_KEY_FILE")

    # sysctl -w net.ipv4.ip_forward=1
    # sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf

    # PEER_PRIV_KEY=$(wg genkey)
    # PEER_PUB_KEY=$(echo "$PEER_PRIV_KEY" | wg pubkey)

    # cat > "$WG_CONF" <<EOF
    # [Interface]
    # Address = $SERVER_IP
    # ListenPort = $SERVER_PORT
    # PrivateKey = $SERVER_PRIV_KEY

    # [Peer]
    # PublicKey = $PEER_PUB_KEY
    # AllowedIPs = $PEER_IP
    # EOF

    # chmod 600 "$WG_CONF"

    # for cidr in "${ACCESS_CIDRS[@]}"; do
    #     iptables -A FORWARD -i $WG_INTERFACE -d "$cidr" -j ACCEPT
    #     iptables -A FORWARD -o $WG_INTERFACE -s "$cidr" -d "${PEER_IP%/32}" -j ACCEPT
    #     iptables -t nat -A POSTROUTING -s "${PEER_IP%/32}" -d "$cidr" -j MASQUERADE
    # done

    # systemctl enable wg-quick@$WG_INTERFACE
    # systemctl start wg-quick@$WG_INTERFACE

    # cat > "$PEER_CONF" <<EOF
    # [Interface]
    # PrivateKey = $PEER_PRIV_KEY
    # Address = $PEER_IP
    # DNS = 1.1.1.1

    # [Peer]
    # PublicKey = $SERVER_PUB_KEY
    # Endpoint = wire.cp.ligocloud.tech:$SERVER_PORT
    # AllowedIPs = 10.12.0.0/16
    # PersistentKeepalive = 25
    # EOF
    #  #ojo space en asterisco
    # sed -i "s/^#Port .* /Port 42022/" /etc/ssh/sshd_config
    # sed -i 's/^#PermitRootLogin .* /PermitRootLogin no/' /etc/ssh/sshd_config
    # sed -i 's/^#PasswordAuthentication .* /PasswordAuthentication no/' /etc/ssh/sshd_config

    # # Restart SSH service
    # systemctl restart sshd

    # # Install and configure fail2ban
    # cat > /etc/fail2ban/jail.d/sshd.conf <<EOF
    # [sshd]
    # enabled = true
    # port = 42022
    # EOF

    # systemctl enable fail2ban
    # systemctl restart fail2ban

    #############################################
    #################  NETBIRD  #################
    #############################################

    # #!/bin/bash
    # for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
    # apt-get update
    # apt-get install ca-certificates curl
    # install -m 0755 -d /etc/apt/keyrings
    # curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/trusted.gpg.d/docker.asc
    # chmod a+r /etc/apt/trusted.gpg.d/docker.asc

    # echo \
    #   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/debian \
    #   $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    #   tee /etc/apt/sources.list.d/docker.list > /dev/null
    # apt-get update
    # apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin jq

    # ## TODO segurizar esto mejor por q queda en el codigo un meme para fetchear el oidc secret de keycloak
    # ## en gcp se puede usar el gcpauth en vault
    # ## https://github.com/redhat-cop/vault-config-operator/blob/main/docs/auth-engines.md#gcpauthengineconfig
    # # kubectl exec -n vault vault-0 -- /bin/sh -c '\
    # # VAULT_ADDR="http://localhost:8200" \
    # # VAULT_SKIP_VERIFY=true \
    # # export VAULT_TOKEN=$(vault write -tls-skip-verify=true -address="$VAULT_ADDR" -field=token auth/control-plane/login jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token role="vault") \
    # # vault token create -policy="bastion" -renewable=false -field=token -tls-skip-verify=true -address="$VAULT_ADDR" -use-limit=2 -ttl=48h -display-name="bastion"'
    
    # VAULT_TOKEN="hvs.TOKEN"
    
    # VAULT_ADDR="https://vault.int.cp.ligocloud.tech"
    # SECRET=$(< /dev/urandom tr -dc 'A-Za-z0-9.,<>~' | head -c64)
    # PASSWORD=$(< /dev/urandom tr -dc 'A-Za-z0-9.,<>~' | head -c64)
    # SECRET_PAYLOAD=$(jq -n --arg secret "$SECRET" '{"data": {"client_secret": $secret}}')
    # curl -s --request POST \
    #     --header "X-Vault-Token: ${VAULT_TOKEN}" \
    #     --data "${SECRET_PAYLOAD}" \
    #     "${VAULT_ADDR}/v1/secret/data/control-plane/publics/netbird-oidc-client"

    # PASSWORD_PAYLOAD=$(jq -n --arg password "$PASSWORD" '{"data": {"password": $password}}')
    # curl -s --request POST \
    #     --header "X-Vault-Token: ${VAULT_TOKEN}" \
    #     --data "${PASSWORD_PAYLOAD}" \
    #     "${VAULT_ADDR}/v1/secret/data/control-plane/iac/netbird/publics/netbird-server-pg"

    # cd /opt
    # REPO="https://github.com/netbirdio/netbird/"
    # LATEST_TAG=$(basename $(curl -fs -o/dev/null -w %{redirect_url} ${REPO}releases/latest))
    # echo $LATEST_TAG
    # git clone --depth 1 --branch $LATEST_TAG $REPO

    # cd netbird/infrastructure_files/

    # cat > setup.env <<EOF
    # NETBIRD_DOMAIN="bastion.cp.ligocloud.tech"
    # NETBIRD_LETSENCRYPT_EMAIL="devops@tarjetasperuanas.pe"
    # NETBIRD_AUTH_OIDC_CONFIGURATION_ENDPOINT="https://keycloak.int.cp.ligocloud.tech/realms/ligo/.well-known/openid-configuration"
    # NETBIRD_USE_AUTH0=false
    # NETBIRD_AUTH_CLIENT_ID="netbird"
    # NETBIRD_AUTH_SUPPORTED_SCOPES="openid profile email offline_access api groups"
    # NETBIRD_AUTH_AUDIENCE="netbird"
    # NETBIRD_AUTH_DEVICE_AUTH_CLIENT_ID="netbird"
    # NETBIRD_MGMT_IDP="keycloak"
    # NETBIRD_IDP_MGMT_CLIENT_ID="netbird-backend"
    # NETBIRD_IDP_MGMT_CLIENT_SECRET="$SECRET"
    # NETBIRD_IDP_MGMT_EXTRA_ADMIN_ENDPOINT="https://keycloak.int.cp.ligocloud.tech/admin/realms/ligo"
    # NETBIRD_STORE_CONFIG_ENGINE=postgres
    # # AUTH_CLIENT_SECRET="$SECRET"
    # NETBIRD_STORE_ENGINE_POSTGRES_DSN="host=netbird.int.cp.ligocloud.tech user=netbird password=$PASSWORD dbname=netbird port=5432"
    # EOF

    # ./configure.sh
    # cd artifacts
    # docker compose up -d
*/}}